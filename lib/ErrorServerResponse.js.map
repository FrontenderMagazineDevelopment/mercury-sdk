{"version":3,"sources":["../source/ErrorServerResponse.js"],"names":["ErrorServerResponse","statusCode","statusText","message","name","Error","captureStackTrace","stack"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;IASqBA,mB;;;;;AACnB;;;;;;;;;AASA,+BAAYC,UAAZ,EAAwBC,UAAxB,EAAoD;AAAA;;AAAA,QAAhBC,OAAgB,uEAAN,IAAM;;AAAA;;AAClD,6FAAMA,OAAN;AACA,UAAKC,IAAL,GAAY,iBAAZ;AACA,UAAKH,UAAL,GAAkBA,UAAlB;AACA,UAAKC,UAAL,GAAkBA,UAAlB;AACA,UAAKC,OAAL,GAAeA,OAAf;;AACA,QAAIE,MAAMC,iBAAV,EAA6B;AAC3BD,YAAMC,iBAAN,wDAA8BN,mBAA9B;AACD,KAFD,MAEO;AACL,YAAKO,KAAL,GAAa,IAAIF,KAAJ,GAAYE,KAAzB;AACD;;AAViD;AAWnD;;;mBArB8CF,K","sourcesContent":["/**\n * Custom error message for abstract server response\n *\n * @namespace ErrorServerResponse\n * @class\n * @param {number} statusCode - http status code\n * @param {string} statusText - http status code text\n * @param {string | null} [message = null] - error details\n */\nexport default class ErrorServerResponse extends Error {\n  /**\n   * Constructor generates error instance\n   * @memberof ErrorServerResponse\n   * @constructor\n   * @param {number} statusCode - http status code\n   * @param {string} statusText - http status code text\n   * @param {string | null} [message = null] - error details\n   * @return {ErrorServerResponse} - current instance\n   */\n  constructor(statusCode, statusText, message = null) {\n    super(message);\n    this.name = 'Server Response';\n    this.statusCode = statusCode;\n    this.statusText = statusText;\n    this.message = message;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorServerResponse);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n}\n"],"file":"ErrorServerResponse.js"}