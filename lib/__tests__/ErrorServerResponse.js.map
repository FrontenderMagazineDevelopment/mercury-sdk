{"version":3,"sources":["../../source/__tests__/ErrorServerResponse.js"],"names":["code","codeText","message","describe","it","expect","ErrorServerResponse","toThrow","error","statusCode","toBe","statusText","stack","not","undefined","Error","captureStackTrace"],"mappings":"aAAA,mF,kFAEA,GAAMA,MAAO,GAAb,CACA,GAAMC,UAAW,WAAjB,CACA,GAAMC,SAAU,gBAAhB,CAEAC,SAAS,wBAAT,CAAmC,UAAM,CACvCC,GAAG,wBAAH,CAA6B,UAAM,CACjCC,OAAO,UAAM,CACX,KAAM,IAAIC,6BAAJ,CAAwBN,IAAxB,CAA8BC,QAA9B,CAAwCC,OAAxC,CACP,CAFD,EAEGK,OAFH,EAGD,CAJD,EAMAH,GAAG,qCAAH,CAA0C,UAAM,CAC9C,GAAI,CACF,KAAM,IAAIE,6BAAJ,CAAwBN,IAAxB,CAA8BC,QAA9B,CAAwCC,OAAxC,CACP,CAAC,MAAOM,KAAP,CAAc,CACdH,OAAOG,MAAMC,UAAb,EAAyBC,IAAzB,CAA8BV,IAA9B,CACD,CACF,CAND,EAQAI,GAAG,0CAAH,CAA+C,UAAM,CACnD,GAAI,CACF,KAAM,IAAIE,6BAAJ,CAAwBN,IAAxB,CAA8BC,QAA9B,CAAwCC,OAAxC,CACP,CAAC,MAAOM,KAAP,CAAc,CACdH,OAAOG,MAAMG,UAAb,EAAyBD,IAAzB,CAA8BT,QAA9B,CACD,CACF,CAND,EAQAG,GAAG,wCAAH,CAA6C,UAAM,CACjD,GAAI,CACF,KAAM,IAAIE,6BAAJ,CAAwBN,IAAxB,CAA8BC,QAA9B,CAAwCC,OAAxC,CACP,CAAC,MAAOM,KAAP,CAAc,CACdH,OAAOG,MAAMN,OAAb,EAAsBQ,IAAtB,CAA2BR,OAA3B,CACD,CACF,CAND,EAQAE,GAAG,gDAAH,CAAqD,UAAM,CACzD,GAAI,CACF,KAAM,IAAIE,6BAAJ,CAAwBN,IAAxB,CAA8BC,QAA9B,CACP,CAAC,MAAOO,KAAP,CAAc,CACdH,OAAOG,MAAMN,OAAb,EAAsBQ,IAAtB,CAA2B,IAA3B,CACD,CACF,CAND,EAQAN,GAAG,sCAAH,CAA2C,UAAM,CAC/C,GAAI,CACF,KAAM,IAAIE,6BAAJ,CAAwBN,IAAxB,CAA8BC,QAA9B,CAAwCC,OAAxC,CACP,CAAC,MAAOM,KAAP,CAAc,CACdH,OAAOG,MAAMI,KAAb,EAAoBC,GAApB,CAAwBH,IAAxB,CAA6BI,SAA7B,CACD,CACF,CAND,EAQAV,GAAG,uEAAH,CAA4E,UAAM,CAChF,GAAI,CACFW,MAAMC,iBAAN,CAA0BF,SAA1B,CACA,KAAM,IAAIR,6BAAJ,CAAwBN,IAAxB,CAA8BC,QAA9B,CAAwCC,OAAxC,CACP,CAAC,MAAOM,KAAP,CAAc,CACdH,OAAOG,MAAMI,KAAb,EAAoBC,GAApB,CAAwBH,IAAxB,CAA6BI,SAA7B,CACD,CACF,CAPD,CAQD,CAvDD","sourcesContent":["import ErrorServerResponse from '../ErrorServerResponse';\n\nconst code = 404;\nconst codeText = 'Not found';\nconst message = 'User not found';\n\ndescribe('Error Service Response', () => {\n  it('Error should be thrown', () => {\n    expect(() => {\n      throw new ErrorServerResponse(code, codeText, message);\n    }).toThrow();\n  });\n\n  it('Error should properly transfer code', () => {\n    try {\n      throw new ErrorServerResponse(code, codeText, message);\n    } catch (error) {\n      expect(error.statusCode).toBe(code);\n    }\n  });\n\n  it('Error should properly transfer code text', () => {\n    try {\n      throw new ErrorServerResponse(code, codeText, message);\n    } catch (error) {\n      expect(error.statusText).toBe(codeText);\n    }\n  });\n\n  it('Error should properly transfer message', () => {\n    try {\n      throw new ErrorServerResponse(code, codeText, message);\n    } catch (error) {\n      expect(error.message).toBe(message);\n    }\n  });\n\n  it('Error should set message as null if it omitter', () => {\n    try {\n      throw new ErrorServerResponse(code, codeText);\n    } catch (error) {\n      expect(error.message).toBe(null);\n    }\n  });\n\n  it('Error should show proper stack trace', () => {\n    try {\n      throw new ErrorServerResponse(code, codeText, message);\n    } catch (error) {\n      expect(error.stack).not.toBe(undefined);\n    }\n  });\n\n  it('Error should show proper stack trace if captureStackTrace unavailable', () => {\n    try {\n      Error.captureStackTrace = undefined;\n      throw new ErrorServerResponse(code, codeText, message);\n    } catch (error) {\n      expect(error.stack).not.toBe(undefined);\n    }\n  });\n});\n"],"file":"ErrorServerResponse.js"}