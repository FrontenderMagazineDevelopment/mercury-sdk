{"version":3,"sources":["../../source/__tests__/ErrorServerResponse.js"],"names":["code","codeText","message","describe","it","expect","ErrorServerResponse","toThrow","error","statusCode","toBe","statusText","stack","not","undefined","Error","captureStackTrace"],"mappings":";;AAAA;;;;AAEA,IAAMA,OAAO,GAAb;AACA,IAAMC,WAAW,WAAjB;AACA,IAAMC,UAAU,gBAAhB;AAEAC,SAAS,wBAAT,EAAmC,YAAM;AACvCC,KAAG,wBAAH,EAA6B,YAAM;AACjCC,WAAO,YAAM;AACX,YAAM,IAAIC,4BAAJ,CAAwBN,IAAxB,EAA8BC,QAA9B,EAAwCC,OAAxC,CAAN;AACD,KAFD,EAEGK,OAFH;AAGD,GAJD;AAMAH,KAAG,qCAAH,EAA0C,YAAM;AAC9C,QAAI;AACF,YAAM,IAAIE,4BAAJ,CAAwBN,IAAxB,EAA8BC,QAA9B,EAAwCC,OAAxC,CAAN;AACD,KAFD,CAEE,OAAOM,KAAP,EAAc;AACdH,aAAOG,MAAMC,UAAb,EAAyBC,IAAzB,CAA8BV,IAA9B;AACD;AACF,GAND;AAQAI,KAAG,0CAAH,EAA+C,YAAM;AACnD,QAAI;AACF,YAAM,IAAIE,4BAAJ,CAAwBN,IAAxB,EAA8BC,QAA9B,EAAwCC,OAAxC,CAAN;AACD,KAFD,CAEE,OAAOM,KAAP,EAAc;AACdH,aAAOG,MAAMG,UAAb,EAAyBD,IAAzB,CAA8BT,QAA9B;AACD;AACF,GAND;AAQAG,KAAG,wCAAH,EAA6C,YAAM;AACjD,QAAI;AACF,YAAM,IAAIE,4BAAJ,CAAwBN,IAAxB,EAA8BC,QAA9B,EAAwCC,OAAxC,CAAN;AACD,KAFD,CAEE,OAAOM,KAAP,EAAc;AACdH,aAAOG,MAAMN,OAAb,EAAsBQ,IAAtB,CAA2BR,OAA3B;AACD;AACF,GAND;AAQAE,KAAG,gDAAH,EAAqD,YAAM;AACzD,QAAI;AACF,YAAM,IAAIE,4BAAJ,CAAwBN,IAAxB,EAA8BC,QAA9B,CAAN;AACD,KAFD,CAEE,OAAOO,KAAP,EAAc;AACdH,aAAOG,MAAMN,OAAb,EAAsBQ,IAAtB,CAA2B,IAA3B;AACD;AACF,GAND;AAQAN,KAAG,sCAAH,EAA2C,YAAM;AAC/C,QAAI;AACF,YAAM,IAAIE,4BAAJ,CAAwBN,IAAxB,EAA8BC,QAA9B,EAAwCC,OAAxC,CAAN;AACD,KAFD,CAEE,OAAOM,KAAP,EAAc;AACdH,aAAOG,MAAMI,KAAb,EAAoBC,GAApB,CAAwBH,IAAxB,CAA6BI,SAA7B;AACD;AACF,GAND;AAQAV,KAAG,uEAAH,EAA4E,YAAM;AAChF,QAAI;AACFW,YAAMC,iBAAN,GAA0BF,SAA1B;AACA,YAAM,IAAIR,4BAAJ,CAAwBN,IAAxB,EAA8BC,QAA9B,EAAwCC,OAAxC,CAAN;AACD,KAHD,CAGE,OAAOM,KAAP,EAAc;AACdH,aAAOG,MAAMI,KAAb,EAAoBC,GAApB,CAAwBH,IAAxB,CAA6BI,SAA7B;AACD;AACF,GAPD;AAQD,CAvDD","sourcesContent":["import ErrorServerResponse from '../ErrorServerResponse';\n\nconst code = 404;\nconst codeText = 'Not found';\nconst message = 'User not found';\n\ndescribe('Error Service Response', () => {\n  it('Error should be thrown', () => {\n    expect(() => {\n      throw new ErrorServerResponse(code, codeText, message);\n    }).toThrow();\n  });\n\n  it('Error should properly transfer code', () => {\n    try {\n      throw new ErrorServerResponse(code, codeText, message);\n    } catch (error) {\n      expect(error.statusCode).toBe(code);\n    }\n  });\n\n  it('Error should properly transfer code text', () => {\n    try {\n      throw new ErrorServerResponse(code, codeText, message);\n    } catch (error) {\n      expect(error.statusText).toBe(codeText);\n    }\n  });\n\n  it('Error should properly transfer message', () => {\n    try {\n      throw new ErrorServerResponse(code, codeText, message);\n    } catch (error) {\n      expect(error.message).toBe(message);\n    }\n  });\n\n  it('Error should set message as null if it omitter', () => {\n    try {\n      throw new ErrorServerResponse(code, codeText);\n    } catch (error) {\n      expect(error.message).toBe(null);\n    }\n  });\n\n  it('Error should show proper stack trace', () => {\n    try {\n      throw new ErrorServerResponse(code, codeText, message);\n    } catch (error) {\n      expect(error.stack).not.toBe(undefined);\n    }\n  });\n\n  it('Error should show proper stack trace if captureStackTrace unavailable', () => {\n    try {\n      Error.captureStackTrace = undefined;\n      throw new ErrorServerResponse(code, codeText, message);\n    } catch (error) {\n      expect(error.stack).not.toBe(undefined);\n    }\n  });\n});\n"],"file":"ErrorServerResponse.js"}