{"version":3,"sources":["../../source/__tests__/ErrorServerResponse.js"],"names":["code","codeText","message","describe","it","expect","ErrorServerResponse","toThrow"],"mappings":";;AAAA;;;;AAEA,IAAMA,OAAO,GAAb;AACA,IAAMC,WAAW,WAAjB;AACA,IAAMC,UAAU,gBAAhB;AAEAC,SAAS,wBAAT,EAAmC,YAAM;AACvCC,KAAG,wBAAH,EAA6B,YAAM;AACjCC,WAAO,YAAM;AACX,YAAM,IAAIC,4BAAJ,CAAwBN,IAAxB,EAA8BC,QAA9B,EAAwCC,OAAxC,CAAN;AACD,KAFD,EAEGK,OAFH;AAGD,GAJD,EADuC,CAMvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAvDD","sourcesContent":["import ErrorServerResponse from '../ErrorServerResponse';\n\nconst code = 404;\nconst codeText = 'Not found';\nconst message = 'User not found';\n\ndescribe('Error Service Response', () => {\n  it('Error should be thrown', () => {\n    expect(() => {\n      throw new ErrorServerResponse(code, codeText, message);\n    }).toThrow();\n  });\n  //\n  // it('Error should properly transfer code', () => {\n  //   try {\n  //     throw new ErrorServerResponse(code, codeText, message);\n  //   } catch (error) {\n  //     expect(error.statusCode).toBe(code);\n  //   }\n  // });\n  //\n  // it('Error should properly transfer code text', () => {\n  //   try {\n  //     throw new ErrorServerResponse(code, codeText, message);\n  //   } catch (error) {\n  //     expect(error.statusText).toBe(codeText);\n  //   }\n  // });\n  //\n  // it('Error should properly transfer message', () => {\n  //   try {\n  //     throw new ErrorServerResponse(code, codeText, message);\n  //   } catch (error) {\n  //     expect(error.message).toBe(message);\n  //   }\n  // });\n  //\n  // it('Error should set message as null if it omitter', () => {\n  //   try {\n  //     throw new ErrorServerResponse(code, codeText);\n  //   } catch (error) {\n  //     expect(error.message).toBe(null);\n  //   }\n  // });\n  //\n  // it('Error should show proper stack trace', () => {\n  //   try {\n  //     throw new ErrorServerResponse(code, codeText, message);\n  //   } catch (error) {\n  //     expect(error.stack).not.toBe(undefined);\n  //   }\n  // });\n  //\n  // it('Error should show proper stack trace if captureStackTrace unavailable', () => {\n  //   try {\n  //     Error.captureStackTrace = undefined;\n  //     throw new ErrorServerResponse(code, codeText, message);\n  //   } catch (error) {\n  //     expect(error.stack).not.toBe(undefined);\n  //   }\n  // });\n});\n"],"file":"ErrorServerResponse.js"}