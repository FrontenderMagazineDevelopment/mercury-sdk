{"version":3,"sources":["../../source/__tests__/MercuryWebParser.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import nock from 'nock';\n// import MercuryWebParser from '../MercuryWebParser';\n// import response from '../__mocks__/response.json';\n//\n// const url =\n//   'https://medium.com/@addyosmani/progressive-web-apps-with-react-js-part-2-page-load-performance-33b932d97cf2';\n// const key = 'NeBIXVwRCXVIS3lJC74dsRAMBOaIK6H5EEkFudvs';\n//\n// describe('Mercury Web Parser', () => {\n//   it('Should throw error if you do not pass key', () => {\n//     expect(() => {\n//       new MercuryWebParser(); // eslint-disable-line\n//     }).toThrow();\n//   });\n//\n//   it('Should return parsed page on getting single page', async () => {\n//     nock(/[.]+/)\n//       .get('/parser')\n//       .query({ url })\n//       .reply(200, response);\n//     const parser = new MercuryWebParser(key);\n//     const page = await parser.get(url);\n//     expect(page).toEqual(response);\n//   });\n//\n//   it('Should throw ErrorServerResponse if server fail on getting single page', async () => {\n//     nock(/[.]+/)\n//       .get('/parser')\n//       .query({ url })\n//       .reply(500);\n//     try {\n//       const parser = new MercuryWebParser(key);\n//       await parser.get(url);\n//     } catch (error) {\n//       expect(error.name).toEqual('Server Response');\n//     }\n//   });\n//\n//   it('Should return parsed pages array on getting all pages', async () => {\n//     nock(/[.]+/)\n//       .get('/parser')\n//       .query({ url })\n//       .reply(200, response);\n//     const parser = new MercuryWebParser(key);\n//     const page = await parser.getAll(url);\n//     expect(page).toEqual([response]);\n//   });\n//\n//   it('Should throw ErrorServerResponse if server fail on getting all pages', async () => {\n//     nock(/[.]+/)\n//       .get('/parser')\n//       .query({ url })\n//       .reply(500);\n//     try {\n//       const parser = new MercuryWebParser(key);\n//       await parser.getAll(url);\n//     } catch (error) {\n//       expect(error.name).toEqual('Server Response');\n//     }\n//   });\n// });\n"],"file":"MercuryWebParser.js"}