{"version":3,"sources":["../../source/__tests__/MercuryWebParser.js"],"names":["url","key","describe","it","expect","MercuryWebParser","toThrow","get","query","reply","response","parser","page","toEqual","name","getAll"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,MACJ,6GADF;AAEA,IAAMC,MAAM,0CAAZ;AAEAC,SAAS,oBAAT,EAA+B,YAAM;AACnCC,KAAG,2CAAH,EAAgD,YAAM;AACpDC,WAAO,YAAM;AACX,UAAIC,yBAAJ,GADW,CACa;AACzB,KAFD,EAEGC,OAFH;AAGD,GAJD;AAMAH,KAAG,kDAAH;AAAA;AAAA;AAAA;AAAA,0BAAuD;AAAA;AAAA;AAAA;AAAA;AAAA;AACrD,+BAAK,MAAL,EACGI,GADH,CACO,SADP,EAEGC,KAFH,CAES;AAAER;AAAF,aAFT,EAGGS,KAHH,CAGS,GAHT,EAGcC,iBAHd;AAIMC,kBAL+C,GAKtC,IAAIN,yBAAJ,CAAqBJ,GAArB,CALsC;AAAA;AAAA,mBAMlCU,OAAOJ,GAAP,CAAWP,GAAX,CANkC;;AAAA;AAM/CY,gBAN+C;AAOrDR,mBAAOQ,IAAP,EAAaC,OAAb,CAAqBH,iBAArB;;AAPqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvD;AAUAP,KAAG,wEAAH;AAAA;AAAA;AAAA;AAAA,0BAA6E;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3E,+BAAK,MAAL,EACGI,GADH,CACO,SADP,EAEGC,KAFH,CAES;AAAER;AAAF,aAFT,EAGGS,KAHH,CAGS,GAHT;AAD2E;AAMnEE,kBANmE,GAM1D,IAAIN,yBAAJ,CAAqBJ,GAArB,CAN0D;AAAA;AAAA,mBAOnEU,OAAOJ,GAAP,CAAWP,GAAX,CAPmE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASzEI,mBAAO,aAAMU,IAAb,EAAmBD,OAAnB,CAA2B,iBAA3B;;AATyE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7E;AAaAV,KAAG,uDAAH;AAAA;AAAA;AAAA;AAAA,0BAA4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1D,+BAAK,MAAL,EACGI,GADH,CACO,SADP,EAEGC,KAFH,CAES;AAAER;AAAF,aAFT,EAGGS,KAHH,CAGS,GAHT,EAGcC,iBAHd;AAIMC,kBALoD,GAK3C,IAAIN,yBAAJ,CAAqBJ,GAArB,CAL2C;AAAA;AAAA,mBAMvCU,OAAOI,MAAP,CAAcf,GAAd,CANuC;;AAAA;AAMpDY,gBANoD;AAO1DR,mBAAOQ,IAAP,EAAaC,OAAb,CAAqB,CAACH,iBAAD,CAArB;;AAP0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5D;AAUAP,KAAG,sEAAH;AAAA;AAAA;AAAA;AAAA,0BAA2E;AAAA;AAAA;AAAA;AAAA;AAAA;AACzE,+BAAK,MAAL,EACGI,GADH,CACO,SADP,EAEGC,KAFH,CAES;AAAER;AAAF,aAFT,EAGGS,KAHH,CAGS,GAHT;AADyE;AAMjEE,kBANiE,GAMxD,IAAIN,yBAAJ,CAAqBJ,GAArB,CANwD;AAAA;AAAA,mBAOjEU,OAAOI,MAAP,CAAcf,GAAd,CAPiE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASvEI,mBAAO,aAAMU,IAAb,EAAmBD,OAAnB,CAA2B,iBAA3B;;AATuE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3E;AAYD,CApDD","sourcesContent":["import 'isomorphic-fetch';\nimport nock from 'nock';\nimport MercuryWebParser from '../MercuryWebParser';\nimport response from '../__mocks__/response.json';\n\nconst url =\n  'https://medium.com/@addyosmani/progressive-web-apps-with-react-js-part-2-page-load-performance-33b932d97cf2';\nconst key = 'NeBIXVwRCXVIS3lJC74dsRAMBOaIK6H5EEkFudvs';\n\ndescribe('Mercury Web Parser', () => {\n  it('Should throw error if you do not pass key', () => {\n    expect(() => {\n      new MercuryWebParser(); // eslint-disable-line\n    }).toThrow();\n  });\n\n  it('Should return parsed page on getting single page', async () => {\n    nock(/[.]+/)\n      .get('/parser')\n      .query({ url })\n      .reply(200, response);\n    const parser = new MercuryWebParser(key);\n    const page = await parser.get(url);\n    expect(page).toEqual(response);\n  });\n\n  it('Should throw ErrorServerResponse if server fail on getting single page', async () => {\n    nock(/[.]+/)\n      .get('/parser')\n      .query({ url })\n      .reply(500);\n    try {\n      const parser = new MercuryWebParser(key);\n      await parser.get(url);\n    } catch (error) {\n      expect(error.name).toEqual('Server Response');\n    }\n  });\n\n  it('Should return parsed pages array on getting all pages', async () => {\n    nock(/[.]+/)\n      .get('/parser')\n      .query({ url })\n      .reply(200, response);\n    const parser = new MercuryWebParser(key);\n    const page = await parser.getAll(url);\n    expect(page).toEqual([response]);\n  });\n\n  it('Should throw ErrorServerResponse if server fail on getting all pages', async () => {\n    nock(/[.]+/)\n      .get('/parser')\n      .query({ url })\n      .reply(500);\n    try {\n      const parser = new MercuryWebParser(key);\n      await parser.getAll(url);\n    } catch (error) {\n      expect(error.name).toEqual('Server Response');\n    }\n  });\n});\n"],"file":"MercuryWebParser.js"}