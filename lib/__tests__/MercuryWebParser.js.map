{"version":3,"sources":["../../source/__tests__/MercuryWebParser.js"],"names":["url","key","describe","it","expect","MercuryWebParser","toThrow","get","query","reply","response","parser","page","toEqual","name","getAll"],"mappings":"aAAA,kDACA,6EACA,4E,4oBAEA,GAAMA,KACJ,6GADF,CAEA,GAAMC,KAAM,0CAAZ,CAEAC,SAAS,oBAAT,CAA+B,UAAM,CACnCC,GAAG,2CAAH,CAAgD,UAAM,CACpDC,OAAO,UAAM,CACX,GAAIC,0BAAJ,CAAwB;AACzB,CAFD,EAEGC,OAFH,EAGD,CAJD,EAMAH,GAAG,kDAAH,qEAAuD,kJACrD,kBAAK,MAAL,EACGI,GADH,CACO,SADP,EAEGC,KAFH,CAES,CAAER,OAAF,CAFT,EAGGS,KAHH,CAGS,GAHT,CAGcC,iBAHd,EAIMC,MAL+C,CAKtC,GAAIN,0BAAJ,CAAqBJ,GAArB,CALsC,uBAMlCU,QAAOJ,GAAP,CAAWP,GAAX,CANkC,QAM/CY,IAN+C,eAOrDR,OAAOQ,IAAP,EAAaC,OAAb,CAAqBH,iBAArB,EAPqD,0DAAvD,IAUAP,GAAG,wEAAH,qEAA6E,kJAC3E,kBAAK,MAAL,EACGI,GADH,CACO,SADP,EAEGC,KAFH,CAES,CAAER,OAAF,CAFT,EAGGS,KAHH,CAGS,GAHT,EAD2E,iBAMnEE,MANmE,CAM1D,GAAIN,0BAAJ,CAAqBJ,GAArB,CAN0D,wBAOnEU,QAAOJ,GAAP,CAAWP,GAAX,CAPmE,2FASzEI,OAAO,aAAMU,IAAb,EAAmBD,OAAnB,CAA2B,iBAA3B,EATyE,qEAA7E,IAaAV,GAAG,uDAAH,qEAA4D,uJAC1D,kBAAK,MAAL,EACGI,GADH,CACO,SADP,EAEGC,KAFH,CAES,CAAER,OAAF,CAFT,EAGGS,KAHH,CAGS,GAHT,CAGcC,iBAHd,EAIMC,MALoD,CAK3C,GAAIN,0BAAJ,CAAqBJ,GAArB,CAL2C,wBAMvCU,QAAOI,MAAP,CAAcf,GAAd,CANuC,QAMpDY,IANoD,gBAO1DR,OAAOQ,IAAP,EAAaC,OAAb,CAAqB,CAACH,iBAAD,CAArB,EAP0D,4DAA5D,IAUAP,GAAG,sEAAH,qEAA2E,kJACzE,kBAAK,MAAL,EACGI,GADH,CACO,SADP,EAEGC,KAFH,CAES,CAAER,OAAF,CAFT,EAGGS,KAHH,CAGS,GAHT,EADyE,iBAMjEE,MANiE,CAMxD,GAAIN,0BAAJ,CAAqBJ,GAArB,CANwD,wBAOjEU,QAAOI,MAAP,CAAcf,GAAd,CAPiE,2FASvEI,OAAO,aAAMU,IAAb,EAAmBD,OAAnB,CAA2B,iBAA3B,EATuE,qEAA3E,GAYD,CApDD","sourcesContent":["import nock from 'nock';\nimport MercuryWebParser from '../MercuryWebParser';\nimport response from '../__mocks__/response.json';\n\nconst url =\n  'https://medium.com/@addyosmani/progressive-web-apps-with-react-js-part-2-page-load-performance-33b932d97cf2';\nconst key = 'NeBIXVwRCXVIS3lJC74dsRAMBOaIK6H5EEkFudvs';\n\ndescribe('Mercury Web Parser', () => {\n  it('Should throw error if you do not pass key', () => {\n    expect(() => {\n      new MercuryWebParser(); // eslint-disable-line\n    }).toThrow();\n  });\n\n  it('Should return parsed page on getting single page', async () => {\n    nock(/[.]+/)\n      .get('/parser')\n      .query({ url })\n      .reply(200, response);\n    const parser = new MercuryWebParser(key);\n    const page = await parser.get(url);\n    expect(page).toEqual(response);\n  });\n\n  it('Should throw ErrorServerResponse if server fail on getting single page', async () => {\n    nock(/[.]+/)\n      .get('/parser')\n      .query({ url })\n      .reply(500);\n    try {\n      const parser = new MercuryWebParser(key);\n      await parser.get(url);\n    } catch (error) {\n      expect(error.name).toEqual('Server Response');\n    }\n  });\n\n  it('Should return parsed pages array on getting all pages', async () => {\n    nock(/[.]+/)\n      .get('/parser')\n      .query({ url })\n      .reply(200, response);\n    const parser = new MercuryWebParser(key);\n    const page = await parser.getAll(url);\n    expect(page).toEqual([response]);\n  });\n\n  it('Should throw ErrorServerResponse if server fail on getting all pages', async () => {\n    nock(/[.]+/)\n      .get('/parser')\n      .query({ url })\n      .reply(500);\n    try {\n      const parser = new MercuryWebParser(key);\n      await parser.getAll(url);\n    } catch (error) {\n      expect(error.name).toEqual('Server Response');\n    }\n  });\n});\n"],"file":"MercuryWebParser.js"}