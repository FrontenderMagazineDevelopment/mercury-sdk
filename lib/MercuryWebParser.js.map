{"version":3,"sources":["../source/MercuryWebParser.js"],"names":["MercuryWebParser","key","undefined","Error","message","service","url","headers","response","ok","ErrorServerResponse","status","statusText","fail","json","data","pages","length","page","next_page_url","get","push"],"mappings":"6FAAA,yEACA,kF,m7CAEA;;;;;;;MAQqBA,iB,yBACnB;;;KAIA,0BAAYC,GAAZ,CAAiB,wCACf,GAAIA,MAAQC,SAAZ,CAAuB,KAAM,IAAIC,MAAJ,CAAUH,iBAAiBI,OAAjB,CAAyBH,GAAnC,CAAN,CACvB,KAAKI,OAAL,CAAe,sCAAf,CACA,KAAKJ,GAAL,CAAWA,GACZ,CAED;;;+CASA;;;;;;;;;;uGAWUK,G,yJACe,uCAAS,KAAKD,OAAd,iBAA6BC,GAA7B,EAAoC,CACzDC,QAAS,CACP,eAAgB,kBADT,CAEP,YAAa,KAAKN,GAFX,CADgD,CAApC,C,QAAjBO,Q,kBAMDA,SAASC,E,6BACN,IAAIC,6BAAJ,CACJF,SAASG,MADL,CAEJH,SAASI,UAFL,CAGJZ,iBAAiBI,OAAjB,CAAyBS,IAHrB,C,8BAKWL,UAASM,IAAT,E,QAAbC,I,+CACCA,I,4HAGT;;;;;;;;;;2HAWaT,G,oIACLU,K,CAAQ,E,aAEPA,MAAMC,MAAN,GAAiB,CAAjB,EAAsBC,KAAKC,aAAL,GAAuB,I,iDACrC,MAAKC,GAAL,CAASd,GAAT,C,QAAbY,I,gBACAF,MAAMK,IAAN,CAAWH,IAAX,E,+DAEKF,K,qIAGT;;;;;;;MASA;;;;;;;;;;;;;;;;;;;qFA9EmBhB,gB,WAeF,CACfC,IAAK,kBADU,CAEfY,KAAM,sBAFS,C","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport ErrorServerResponse from './ErrorServerResponse';\n\n/**\n * SDK for mercury api\n *\n * @namespace MercuryWebParser\n * @class\n * @param {string} key - mercury api key\n * @see https://mercury.postlight.com/web-parser/\n */\nexport default class MercuryWebParser {\n  /**\n   * Constructor, save mercury api key\n   * @param {string} key - mercury api key\n   */\n  constructor(key) {\n    if (key === undefined) throw new Error(MercuryWebParser.message.key);\n    this.service = 'https://mercury.postlight.com/parser';\n    this.key = key;\n  }\n\n  /**\n   * Messages of mercury SDK\n   * @type {Object}\n   */\n  static message = {\n    key: 'You need API key',\n    fail: 'Failed fetching page',\n  };\n\n  /**\n   * Get content of page\n   * @param  {string} url - page url\n   * @return {Promise.<Page>} - single page\n   *\n   * @example <caption>Get single page</caption>\n   * (async () => {\n   *   const parser = new MercuryWebParser('NeBIXVwRCXVIS3lJC74dsRAMBOaIK6H5EEkFudvs');\n   *   const page = await parser.get('http://alistapart.com/article/design-like-a-teacher');\n   * })();\n   */\n  async get(url) {\n    const response = await fetch(`${this.service}?url=${url}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': this.key,\n      },\n    });\n    if (!response.ok)\n      throw new ErrorServerResponse(\n        response.status,\n        response.statusText,\n        MercuryWebParser.message.fail,\n      );\n    const data = await response.json();\n    return data;\n  }\n\n  /**\n   * Get content of all pages\n   * @param  {string} url - page url\n   * @return {Promise.<PagesList>} - array of pages\n   *\n   * @example <caption>Get all pages as array</caption>\n   * (async () => {\n   *   const parser = new MercuryWebParser('NeBIXVwRCXVIS3lJC74dsRAMBOaIK6H5EEkFudvs');\n   *   const pages = await parser.getAll('http://alistapart.com/article/design-like-a-teacher');\n   * })();\n   */\n  async getAll(url) {\n    const pages = [];\n    let page;\n    while (pages.length === 0 || page.next_page_url !== null) {\n      page = await this.get(url);\n      pages.push(page);\n    }\n    return pages;\n  }\n\n  /**\n   * Pages list array\n   *\n   * @namespace MercuryWebParser\n   * @typedef {PagesList} Array of pages\n   *\n   * @property {Array.<Page>} - array of pages\n   */\n\n  /**\n   * Page object\n   *\n   * @namespace MercuryWebParser\n   * @typedef {Page} Page representation\n   *\n   * @property {string} title - page title\n   * @property {string} content - page content\n   * @property {string} date_published - page publication timestamp\n   * @property {string} lead_image_url - lead image url\n   * @property {string} dek - ?\n   * @property {string} url - url of the current page\n   * @property {string} domain - page domain\n   * @property {string} excerpt - ?\n   * @property {number} word_count - count of the words on the page\n   * @property {string} direction - ltr or rtl text direction\n   * @property {number} total_pages - total pages count\n   * @property {number} rendered_pages - ?\n   * @property {string | null} next_page_url - next page url if available or null if there are none\n   */\n}\n"],"file":"MercuryWebParser.js"}